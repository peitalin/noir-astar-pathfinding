{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":5844959675288205031,"abi":{"parameters":[{"name":"x1","type":{"kind":"integer","sign":"signed","width":32},"visibility":"private"},{"name":"x2","type":{"kind":"integer","sign":"signed","width":32},"visibility":"private"},{"name":"y1","type":{"kind":"integer","sign":"signed","width":32},"visibility":"private"},{"name":"y2","type":{"kind":"integer","sign":"signed","width":32},"visibility":"private"},{"name":"max_steps","type":{"kind":"integer","sign":"signed","width":32},"visibility":"public"}],"param_witnesses":{"max_steps":[{"start":4,"end":5}],"x1":[{"start":0,"end":1}],"x2":[{"start":1,"end":2}],"y1":[{"start":2,"end":3}],"y2":[{"start":3,"end":4}]},"return_type":null,"return_witnesses":[],"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"47":{"source":"mod foo;\nuse foo::bar;\nuse dep::std::slice;\n\n\nfn main(x1: i32, x2: i32, y1: i32, y2: i32, max_steps: pub i32) {\n\n    //// Prove move distance doesn't exceed radius\n    // // distance = sqrt( (x2 - x1)^2 + (y2 - y1)^2 )\n    // let dx = x2 - x1;\n    // let dx2 = dx * dx;\n    // let dy = y2 - y1;\n    // let dy2 = dy * dy;\n\n    // let dx2_dy2 = dx2 + dy2;\n    // let sqrt_res = get_sqrt( dx2_dy2 ) as i32;\n    // let sqrt_sq = sqrt_res * sqrt_res;\n    // assert(sqrt_sq == dx2_dy2); // constrain the oracle response\n\n    // println(f\"ceil(sqrt) of {dx2_dy2} = {sqrtd}\"); // remove println for noir-js\n    // let max_dist = radius;\n    // // check move distance doesn't exceed radius\n    // assert(sqrt_res <= max_dist);\n\n    let astar_path_results = get_astar_path([x1, y1], [x2, y2]);\n    let path_pruned = pruneAstarPath(astar_path_results);\n    let path_len = path_pruned.len() as i32;\n    /// MUST REMOVE println for noir-js proof generation to work ////\n    // println(f\"A* path: {path_pruned}\");\n    // println(f\"assert A* path length: {path_len} <= max_steps: {max_steps}\");\n    assert(path_len <= max_steps);\n\n}\n\n\n#[oracle(GetSqrt)]\nunconstrained fn sqrt(d: i32) -> i32 { }\n\nunconstrained fn get_sqrt(d: i32) -> i32 {\n    sqrt(d)\n}\n\n#[oracle(GetAstarPath)]\nunconstrained fn astar_path_oracle(start: [i32; 2], end: [i32; 2]) -> (\n    // max number of path points returned from the orcacle is static\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n) {}\n\nunconstrained fn get_astar_path(\n    start: [i32; 2],\n    end: [i32; 2]\n) -> [[i32;2]; 10] {\n    let (r0, r1, r2, r3, r4, r5, r6, r7, r8, r9) = astar_path_oracle(start, end);\n    let mut path = [r0, r1, r2, r3, r4, r5, r6, r7, r8, r9];\n    path\n}\n\nfn pruneAstarPath(pathArray: [[i32; 2]; 10]) -> [[i32; 2]] {\n\n    let mut path = pathArray.as_slice();\n    let NOIR_ZERO_VALUE = 65_536;\n    // Use this value as \"zero\" when pruning values\n    // see NOIR_ZERO_VALUE_HEX in the oracle/cmd/main.go\n    // hex value: 0x10000 => 65536 when decoded as i32.\n    for i in 0..9 {\n        let lastIndex = 9 - i;\n        if path[lastIndex][0] == NOIR_ZERO_VALUE {\n            if path[lastIndex][1] == NOIR_ZERO_VALUE {\n                let res = path.remove(lastIndex);\n                path = res.0;\n            }\n        }\n    }\n    path\n}\n\n\n#[test]\nfn test_main() {\n     // let radius = 49;\n    let max_steps = 10;\n    main(1, 4, 1, 5, max_steps);\n}\n\n#[test]\nfn test_sqrt_oracle() {\n    let sqrtnum = 225;\n    let maxdist = get_sqrt(sqrtnum);\n    println(f\"sqrt({sqrtnum}) = {maxdist}\");\n    assert(maxdist == 15);\n}\n\n#[test]\nfn test_astar_oracle1() {\n    let mut path = get_astar_path([0, 0], [7, 2]);\n    // Noir oracles can only receive data in Single or Array format\n    // Arrays must specify specific lengths,\n    // so we return zero'd out path coordinates as [NOIR_ZERO_VALUE, NOIR_ZERO_VALUE] and prune them\n    let pathPruned = pruneAstarPath(path);\n    println(f\"pruned path: {pathPruned}\");\n}\n\n#[test]\nfn test_astar_oracle2() {\n    let mut path = get_astar_path([0, 0], [9, 8]);\n    let pathPruned = pruneAstarPath(path);\n    println(f\"pruned path: {pathPruned}\");\n}\n","path":"/Users/peita/Dev/aztec/movement/circuits-astar/src/main.nr"}},"names":["main"]}