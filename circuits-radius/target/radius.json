{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":164721479739047403,"abi":{"parameters":[{"name":"x1","type":{"kind":"integer","sign":"signed","width":32},"visibility":"private"},{"name":"x2","type":{"kind":"integer","sign":"signed","width":32},"visibility":"private"},{"name":"y1","type":{"kind":"integer","sign":"signed","width":32},"visibility":"private"},{"name":"y2","type":{"kind":"integer","sign":"signed","width":32},"visibility":"private"},{"name":"d","type":{"kind":"integer","sign":"signed","width":32},"visibility":"public"}],"param_witnesses":{"d":[{"start":4,"end":5}],"x1":[{"start":0,"end":1}],"x2":[{"start":1,"end":2}],"y1":[{"start":2,"end":3}],"y2":[{"start":3,"end":4}]},"return_type":null,"return_witnesses":[],"error_types":{}},"bytecode":"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","debug_symbols":"ndlNasMwEEDhu2gdimc0Gkm5SinFzU8JBCckTqGE3L1OGy+amMLrzmPpW73d6ByWq7fT++umW++OYf58Dtvdou03u26YziF9/zru2+46Hfv20Ie5aJqFVbccvqJeZmG92a7C3PzyMgtOQaagUFApkAYLwUKxiFgYFri34OCCiwtOLri54uaKmyturri54uaKmyturri54uaKm8fp5lZGkdK9ECwUi4iFYZGwcCwyFgWLSoXh5oabG25uuLnh5jbdPMsocrkXjkXGomBRqUgNFoKFYhGxMCxw84SbJ9w84eYJN3fc3HFzx80dN3fc3HFzx80dN3fc3HHzPN282k1oI/dCsFAsIhaGRcLCschYFCwqFQU3L7h5wc0Lbl5w8zLZXFVHER+EY5GxKFhUKmqDhWChWEQsDAvcvOLmFTevuHnFzaVpOBFOlJPIiXGSOHFOMieFE15/eiUXLd5I9OaBCCeT9S35jVh+XPxFToyTxIlzkjkpnFRMppdzfxPhhNdXXl95feX19R/1m6fJ/qmMO4VUf+8UhuGjPWzat+3q+lhwPTt1i/HtYBj7z/3PyXD3Cw==","file_map":{"46":{"source":"\nfn main(x1: i32, x2: i32, y1: i32, y2: i32, d: pub i32) {\n\n    // distance = sqrt( (x2 - x1)^2 + (y2 - y1)^2 )\n    let dx = x2 - x1;\n    let dx2 = dx * dx;\n\n    let dy = y2 - y1;\n    let dy2 = dy * dy;\n\n    let dx2_dy2 = dx2 + dy2;\n\n    // instead of sqrt, we square distance\n    // let maxdist = d * d;\n    let maxdist = d;\n\n    let sqrtd = get_sqrt(dx2_dy2);\n    // println(f\"ceil(sqrt) of {dx2_dy2} = {sqrtd}\");\n    // let sqrtd = dx2_dy2;\n\n    assert(sqrtd <= maxdist);\n\n}\n\n\n#[oracle(GetSqrt)]\nunconstrained fn sqrt(d: i32) -> i32 { }\n\nunconstrained fn get_sqrt(d: i32) -> i32 {\n    sqrt(d)\n}\n\n\n#[test]\nfn test_main() {\n    main(1, 4, 1, 5, 49);\n\n}\n\n#[test]\nfn test_main_oracle() {\n    let maxdist = get_sqrt(225);\n    main(1, 4, 1, 6, maxdist);\n\n}\n\n\n","path":"/Users/peita/Dev/aztec/movement/circuits-radius/src/main.nr"}},"names":["main"]}