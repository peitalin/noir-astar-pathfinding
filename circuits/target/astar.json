{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":7845293111366431882,"abi":{"parameters":[{"name":"start","type":{"kind":"array","length":2,"type":{"kind":"integer","sign":"signed","width":32}},"visibility":"private"},{"name":"end","type":{"kind":"array","length":2,"type":{"kind":"integer","sign":"signed","width":32}},"visibility":"private"},{"name":"max_steps","type":{"kind":"integer","sign":"signed","width":32},"visibility":"public"}],"param_witnesses":{"end":[{"start":2,"end":4}],"max_steps":[{"start":4,"end":5}],"start":[{"start":0,"end":2}]},"return_type":{"abi_type":{"kind":"integer","sign":"signed","width":32},"visibility":"public"},"return_witnesses":[677],"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"47":{"source":"mod foo;\nuse foo::bar;\nuse dep::std::slice;\n\n\nfn main(start: [i32; 2], end: [i32; 2], max_steps: pub i32) -> pub i32 {\n\n    let x1 = start[0];\n    let y1 = start[1];\n\n    let x2 = end[0];\n    let y2 = end[1];\n\n    let astar_path_results = get_astar_path([x1, y1], [x2, y2]);\n    let path_pruned = pruneAstarPath(astar_path_results);\n    let path_len = path_pruned.len() as i32;\n    /// MUST REMOVE println for noir-js proof generation to work ////\n    // println(f\"A* path: {path_pruned}\");\n    // println(f\"assert A* path length: {path_len} <= max_steps: {max_steps}\");\n    assert(path_len <= max_steps);\n\n    path_len\n}\n\n#[oracle(GetAstarPath)]\nunconstrained fn astar_path_oracle(start: [i32; 2], end: [i32; 2]) -> (\n    // max number of path points returned from the orcacle is static\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n    [i32; 2],\n) {}\n\nunconstrained fn get_astar_path(\n    start: [i32; 2],\n    end: [i32; 2]\n) -> [[i32;2]; 10] {\n    let (r0, r1, r2, r3, r4, r5, r6, r7, r8, r9) = astar_path_oracle(start, end);\n    let mut path = [r0, r1, r2, r3, r4, r5, r6, r7, r8, r9];\n    path\n}\n\nfn pruneAstarPath(pathArray: [[i32; 2]; 10]) -> [[i32; 2]] {\n\n    let mut path = pathArray.as_slice();\n    let NOIR_ZERO_VALUE = 65_536;\n    // Use this value as \"zero\" when pruning values\n    // see NOIR_ZERO_VALUE_HEX in the oracle/cmd/main.go\n    // hex value: 0x10000 => 65536 when decoded as i32.\n    for i in 0..9 {\n        let lastIndex = 9 - i;\n        if path[lastIndex][0] == NOIR_ZERO_VALUE {\n            if path[lastIndex][1] == NOIR_ZERO_VALUE {\n                let res = path.remove(lastIndex);\n                path = res.0;\n            }\n        }\n    }\n    path\n}\n\n\n#[test]\nfn test_main() {\n    let max_steps = 10;\n    let steps = main([1, 1], [4, 5], max_steps);\n    println(f\"A* number of steps: {steps}\");\n}\n\n#[test]\nfn test_astar_oracle1() {\n    let mut path = get_astar_path([0, 0], [7, 2]);\n    // Noir oracles can only receive data in Single or Array format\n    // Arrays must specify specific lengths,\n    // so we return zero'd out path coordinates as [NOIR_ZERO_VALUE, NOIR_ZERO_VALUE] and prune them\n    let pathPruned = pruneAstarPath(path);\n    println(f\"pruned path: {pathPruned}\");\n}\n\n#[test]\nfn test_astar_oracle2() {\n    let mut path = get_astar_path([0, 0], [9, 8]);\n    let pathPruned = pruneAstarPath(path);\n    println(f\"pruned path: {pathPruned}\");\n}\n","path":"/Users/peita/Dev/aztec/movement/circuits/astar/src/main.nr"}},"names":["main"]}