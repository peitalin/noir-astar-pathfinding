{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":5795494097432933786,"abi":{"parameters":[{"name":"start","type":{"kind":"array","length":2,"type":{"kind":"integer","sign":"signed","width":32}},"visibility":"private"},{"name":"end","type":{"kind":"array","length":2,"type":{"kind":"integer","sign":"signed","width":32}},"visibility":"private"},{"name":"max_dist","type":{"kind":"integer","sign":"signed","width":32},"visibility":"public"}],"param_witnesses":{"end":[{"start":2,"end":4}],"max_dist":[{"start":4,"end":5}],"start":[{"start":0,"end":2}]},"return_type":{"abi_type":{"kind":"integer","sign":"signed","width":32},"visibility":"public"},"return_witnesses":[82],"error_types":{}},"bytecode":"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","debug_symbols":"ldnBauMwEIDhd/E5LNJoZjTKqyzL4rbpEghOadKFJfTd12nrQmNR+G+W5e/0H4xGl+Fhd/fy5/d+ejyehu3Py3A43o/n/XGaV5fB3l6dnsbpujqdx+fzsC1im2E3PcxPRV43w+P+sBu2Wl9/bQanoFIQFDQKcsIiYyFYFCwUC9w74+AZF884ecbNBTcX3Fxwc8HNBTcX3Fxwc8HNBTcX3Lz0m2sswuxWZCwEi4KFYmFYOBYVi8CiUaG4ueLmipsrbq64ufab17SIWm+FY1GxCCwaFZawyFgIFgULxQI3N9zccHPDzQ03d9zccXPHzR03d9zccXPHzR03d9zccfPab97Kh9CUbkXGQrAoWCgWhoVjUbEILBoVgZsHbh64eeDmgZtHt7lKXkRZCceiYhFYNCpawiJjIVgULBQL3Lzh5g03b7h5w81zSpxkToSTwolyYpw4J5WT4ITX74/k1D5JXZPMSb9+Ww5VluuKFE6UE+PEOamcBCcNk/5w7nuSOeH1hdcXXl94feH1hdcXXl94/cLr9+d0Vpazg2lbkW79WuSDVFsP5Asnyolx4pxUToKThkl/YPc9yZzw+srrK6+vvL7y+jn96PaPWP6WEfEFzYu/4/N+vDvsrheF172X6X65N5yX539P7zvzt/8B","file_map":{"47":{"source":"mod foo;\nuse foo::bar;\nuse dep::std::slice;\n\n\nfn main(start: [i32; 2], end: [i32; 2], max_dist: pub i32) -> pub i32 {\n\n    let x1 = start[0];\n    let y1 = start[1];\n\n    let x2 = end[0];\n    let y2 = end[1];\n\n    // Prove move distance doesn't exceed max_dist\n    // distance = sqrt( (x2 - x1)^2 + (y2 - y1)^2 )\n    let dx = x2 - x1;\n    let dx2 = dx * dx;\n    let dy = y2 - y1;\n    let dy2 = dy * dy;\n\n    let dx2_dy2 = dx2 + dy2;\n    let distance = get_sqrt( dx2_dy2 ) as i32;\n    let _sqrt_sq = distance * distance;\n    assert(_sqrt_sq == dx2_dy2); // constrain the oracle response\n\n    // println(f\"ceil(sqrt) of {dx2_dy2} = {sqrtd}\"); // remove println for noir-js\n    // check move distance doesn't exceed max_dist\n    assert(distance <= max_dist);\n\n    distance\n}\n\n\n#[oracle(GetSqrt)]\nunconstrained fn sqrt(d: i32) -> i32 { }\n\nunconstrained fn get_sqrt(d: i32) -> i32 {\n    sqrt(d)\n}\n\n#[test]\nfn test_main() {\n    let max_distance = 49;\n    let distance = main([1, 1], [4, 5], max_distance);\n    println(f\"Distance: {distance}\");\n}\n\n#[test]\nfn test_sqrt_oracle() {\n    let sqrtnum = 225;\n    let maxdist = get_sqrt(sqrtnum);\n    println(f\"sqrt({sqrtnum}) = {maxdist}\");\n    assert(maxdist == 15);\n}\n","path":"/Users/peita/Dev/aztec/movement/circuits/sqrt/src/main.nr"}},"names":["main"]}